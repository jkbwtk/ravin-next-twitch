env:
  es2021: true
  node: true
extends:
  - google
  - "plugin:@typescript-eslint/recommended"
  # - "plugin:@typescript-eslint/recommended-requiring-type-checking"
parser: "@typescript-eslint/parser"
parserOptions:
  # project:
  #   [
  #     "./backend/tsconfig.json",
  #     "./frontend/tsconfig.json",
  #     "./shared/tsconfig.json",
  #   ]
  ecmaVersion: 12
  sourceType: module
  ecmaFeatures:
    jsx: true
plugins:
  - "@typescript-eslint"
rules:
  require-jsdoc: "off"
  linebreak-style: "off"
  object-curly-spacing: "off"
  "@typescript-eslint/object-curly-spacing":
    - error
    - always
  max-len: ["error", { "code": 160, "comments": 320 }]
  # max-len: "off"
  object-property-newline: ["error", { "allowAllPropertiesOnSameLine": true }]
  no-console: "off"
  space-infix-ops: ["error", { "int32Hint": false }]
  camelcase: ["off", { "properties": "never" }]
  indent: ["error", 2, { "SwitchCase": 1 }]
  "@typescript-eslint/indent": ["error", 2, { "SwitchCase": 1 }]
  sort-imports:
    [
      "error",
      {
        "ignoreCase": true,
        "ignoreDeclarationSort": true,
        "ignoreMemberSort": false,
        "memberSyntaxSortOrder": ["none", "all", "multiple", "single"],
        "allowSeparatedGroups": false,
      },
    ]
  no-useless-return: error
  arrow-spacing: error
  no-warning-comments: ["error", { "terms": ["!"], "location": "start" }]
  "@typescript-eslint/ban-types": ["error", { "types": { "object": false } }]
  "@typescript-eslint/type-annotation-spacing": ["error", { "after": true }]
  semi: "off"
  "@typescript-eslint/semi": "error"
  "@typescript-eslint/explicit-module-boundary-types":
    ["warn", { allowArgumentsExplicitlyTypedAsAny: true }]
  quote-props: ["error", "as-needed"]
  space-in-parens: ["error", "never"]
  jsx-quotes: ["error", "prefer-single"]
  new-cap: ["error", { "capIsNew": false }]
  prefer-const: "off"
  "@typescript-eslint/no-non-null-assertion": "off"
  "@typescript-eslint/no-namespace": ["error", { "allowDeclarations": true }]
  # "@typescript-eslint/no-misused-promises": "off"
  # "@typescript-eslint/no-floating-promises": "error"
  "@typescript-eslint/no-unused-vars": "warn"
